import React, { useEffect, useRef, useState } from 'react';

function loadLeaflet() {
  return new Promise((resolve) => {
    if (window.L) {
      resolve(window.L);
      return;
    }
    // Load Leaflet CSS
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://unpkg.com/leaflet/dist/leaflet.css';
    document.head.appendChild(link);

    // Load Leaflet JS
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/leaflet/dist/leaflet.js';
    script.onload = () => {
      resolve(window.L);
    };
    document.body.appendChild(script);
  });
}

const FreeRouteFinder = () => {
  const mapRef = useRef(null);
  const routeLayerRef = useRef(null);
  const startMarkerRef = useRef(null);
  const endMarkerRef = useRef(null);

  const [L, setL] = useState(null);
  const [mapInitialized, setMapInitialized] = useState(false);

  const [start, setStart] = useState('');
  const [end, setEnd] = useState('');
  const [info, setInfo] = useState('Enter start and destination, then click Get Route.');

  // Load Leaflet library dynamically once
  useEffect(() => {
    loadLeaflet().then((Leaflet) => {
      setL(Leaflet);
    });
  }, []);

  // Initialize map once Leaflet is loaded
  useEffect(() => {
    if (L && !mapInitialized) {
      mapRef.current = L.map('map').setView([40.7128, -74.006], 13);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Â© OpenStreetMap',
      }).addTo(mapRef.current);
      setMapInitialized(true);
      console.log('Map initialized');
    }
  }, [L, mapInitialized]);

  // Geocode function
  async function geocode(address) {
    const url = `https://nominatim.openstreetmap.org/search?format=json&limit=1&q=${encodeURIComponent(
      address
    )}`;
    const resp = await fetch(url, { headers: { Accept: 'application/json' } });
    if (!resp.ok) throw new Error('Geocoding request failed');
    const data = await resp.json();
    if (!data || data.length === 0) {
      throw new Error('Address not found: ' + address);
    }
    return {
      lat: parseFloat(data[0].lat),
      lon: parseFloat(data[0].lon),
      display_name: data[0].display_name,
    };
  }

  // Format duration utility
  function formatDuration(secondsRaw) {
    const secs = Math.round(secondsRaw);
    const hours = Math.floor(secs / 3600);
    const minutes = Math.floor((secs % 3600) / 60);
    const seconds = secs % 60;
    if (hours > 0) return `${hours}h ${minutes}m ${seconds}s`;
    if (minutes > 0) return `${minutes}m ${seconds}s`;
    return `${seconds}s`;
  }

  // Calculate route function
  async function calculateRoute() {
    if (!L) {
      alert('Leaflet is still loading, please wait...');
      return;
    }
    if (!mapRef.current) {
      alert('Map is not initialized yet, please wait...');
      return;
    }
    if (!start.trim() || !end.trim()) {
      alert('Please enter both starting point and destination.');
      return;
    }
    setInfo('Geocoding addresses...');
    try {
      const startCoords = await geocode(start);
      const endCoords = await geocode(end);

      // Remove previous route and markers safely
      if (routeLayerRef.current) {
        routeLayerRef.current.remove();
        routeLayerRef.current = null;
      }
      if (startMarkerRef.current) {
        startMarkerRef.current.remove();
        startMarkerRef.current = null;
      }
      if (endMarkerRef.current) {
        endMarkerRef.current.remove();
        endMarkerRef.current = null;
      }

      setInfo('Requesting route from OSRM (public server)...');
      // Use OSRM public server
      const osrmUrl = `https://router.project-osrm.org/route/v1/driving/${startCoords.lon},${startCoords.lat};${endCoords.lon},${endCoords.lat}?overview=full&geometries=geojson&steps=false&alternatives=false`;
      const resp = await fetch(osrmUrl);
      if (!resp.ok) throw new Error('OSRM routing error: ' + resp.status);
      const data = await resp.json();
      if (!data.routes || data.routes.length === 0) throw new Error('No route found (OSRM).');

      const route = data.routes[0];
      const routeCoords = route.geometry.coordinates.map((c) => [c[1], c[0]]);
      const distanceMeters = route.distance;
      const durationSeconds = route.duration;

      // Draw route safely
      routeLayerRef.current = L.polyline(routeCoords, { color: 'blue', weight: 5 }).addTo(mapRef.current);

      // Add markers safely
      startMarkerRef.current = L.marker([startCoords.lat, startCoords.lon])
        .addTo(mapRef.current)
        .bindPopup(`<strong>Start</strong><br>${startCoords.display_name}`)
        .openPopup();
      endMarkerRef.current = L.marker([endCoords.lat, endCoords.lon])
        .addTo(mapRef.current)
        .bindPopup(`<strong>End</strong><br>${endCoords.display_name}`);

      // Fit map safely (check both map and routeLayer exist)
      if (mapRef.current && routeLayerRef.current) {
        mapRef.current.fitBounds(routeLayerRef.current.getBounds(), { padding: [50, 50] });
      }

      // Show info
      const distanceKm = distanceMeters / 1000;
      const distanceStr = `${distanceKm.toFixed(2)} km (${Math.round(distanceMeters)} m)`;
      const durationStr = formatDuration(durationSeconds);

      setInfo(
        <>
          <strong>Route found</strong>
          <br />
          <strong>From:</strong> {startCoords.display_name}
          <br />
          <strong>To:</strong> {endCoords.display_name}
          <br />
          <strong>Distance:</strong> {distanceStr} &nbsp;&nbsp;
          <strong>Duration:</strong> {durationStr}
        </>
      );
    } catch (err) {
      console.error(err);
      alert('Could not calculate route: ' + (err.message || err));
      setInfo('Error: ' + (err.message || err));
    }
  }

  return (
    <div
      style={{
        fontFamily: 'Arial, sans-serif',
        margin: 20,
        textAlign: 'center',
      }}
    >
      <h2>Free Route Finder with OpenStreetMap</h2>
      <input
        style={{
          padding: 10,
          fontSize: 16,
          margin: 5,
          borderRadius: 4,
          border: '1px solid #ccc',
          width: 250,
          maxWidth: '90vw',
        }}
        placeholder="Starting Point (city or address)"
        value={start}
        onChange={(e) => setStart(e.target.value)}
      />
      <input
        style={{
          padding: 10,
          fontSize: 16,
          margin: 5,
          borderRadius: 4,
          border: '1px solid #ccc',
          width: 250,
          maxWidth: '90vw',
        }}
        placeholder="Destination (city or address)"
        value={end}
        onChange={(e) => setEnd(e.target.value)}
      />
      <button
        onClick={calculateRoute}
        style={{
          padding: 10,
          fontSize: 16,
          margin: 5,
          borderRadius: 4,
          border: 'none',
          backgroundColor: '#4285f4',
          color: 'white',
          cursor: 'pointer',
          transition: 'background-color 0.3s ease',
          width: 250,
          maxWidth: '90vw',
        }}
        onMouseOver={(e) => (e.currentTarget.style.backgroundColor = '#3367d6')}
        onMouseOut={(e) => (e.currentTarget.style.backgroundColor = '#4285f4')}
      >
        Get Route
      </button>
      <div
        id="info"
        style={{
          maxWidth: 900,
          margin: '10px auto',
          textAlign: 'left',
          background: 'blue',
          padding: '10px 14px',
          borderRadius: 6,
          fontSize: 15,
          minHeight: 70,
          whiteSpace: 'pre-wrap',
        }}
      >
        {info}
      </div>
      <div
        id="map"
        style={{
          height: 500,
          maxWidth: 900,
          margin: '20px auto',
          borderRadius: 8,
          boxShadow: '0 2px 8px rgba(0,0,0,0.2)',
        }}
      />
    </div>
  );
};

export default FreeRouteFinder;
